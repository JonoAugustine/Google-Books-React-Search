{"version":3,"sources":["components/TextInput/index.js","components/TextInput/TextInput.js","api.js","components/BookCard/BookCard.js","components/Navbar.js","pages/Search.js","pages/Saved.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","className","name","type","required","htmlFor","Book","id","volumeInfo","title","authors","description","imageLinks","infoLink","this","image","thumbnail","link","SearchResult","totalItems","items","map","i","api","googleApiUri","uid","localStorage","nid","nanoid","search","searchString","a","axios","get","result","data","getSaved","b","save","book","console","log","put","delete","BookCard","saver","refresh","React","useState","open","setOpen","desc","substr","length","onClick","src","alt","reduce","acc","curr","then","window","Navbar","children","Search","books","setBooks","to","onSubmit","e","preventDefault","target","value","sr","key","Saved","useEffect","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc3dcda4.chunk.js","sourcesContent":["import TextInput from \"./TextInput\";\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\n\r\nconst TextInput = props => {\r\n  return (\r\n    <div className=\"text-input\">\r\n      <input name={props.name} type=\"text\" required {...props} />\r\n      <label htmlFor={props.name} className=\"floating\">\r\n        <span className=\"content-name\">{props.name}</span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { nanoid } from \"nanoid\";\r\nimport axios from \"axios\";\r\n\r\nexport class Book {\r\n  constructor({\r\n    id,\r\n    volumeInfo: { title, authors = [], description, imageLinks, infoLink }\r\n  }) {\r\n    this.id = id;\r\n    this.title = title;\r\n    this.authors = authors;\r\n    /** @type {string} */\r\n    this.description = description;\r\n    this.image = imageLinks ? imageLinks.thumbnail : null;\r\n    this.link = infoLink;\r\n  }\r\n}\r\n\r\nexport class SearchResult {\r\n  constructor({ totalItems = 0, items = [] }) {\r\n    this.totalItems = totalItems;\r\n    this.items = items.map(i => new Book(i));\r\n  }\r\n}\r\n\r\nconst api = {\r\n  googleApiUri: \"https://www.googleapis.com/books/v1/volumes?q=\",\r\n  uid:\r\n    localStorage.uid ||\r\n    (() => {\r\n      let nid = nanoid();\r\n      localStorage.uid = nid;\r\n      return nid;\r\n    })(),\r\n  /**\r\n   *\r\n   * @param {string} searchString\r\n   * @returns {SearchResult}\r\n   */\r\n  search: async function(searchString) {\r\n    const result = await axios.get(this.googleApiUri + searchString);\r\n    return new SearchResult(result.data);\r\n  },\r\n  /**\r\n   * @returns {Promise<Book[]>}\r\n   */\r\n  getSaved: async function() {\r\n    const result = await axios.get(\"/api/\" + this.uid);\r\n    return result.data.map(b => new Book(b));\r\n  },\r\n  /**\r\n   *\r\n   * @param {Book} book\r\n   */\r\n  save: async function(book) {\r\n    console.log(\"saving\");\r\n    await axios.put(\"/api/\" + this.uid, book);\r\n  },\r\n  /**\r\n   *\r\n   * @param {Book} book\r\n   * @returns {boolean}\r\n   */\r\n  delete: async function(book) {\r\n    console.log(\"deleting\");\r\n    const { data } = await axios.delete(`/api/${this.uid}/${book.id}`);\r\n    console.log(\"Deletd\", data);\r\n  }\r\n};\r\n\r\nexport default api;\r\n","import React from \"react\";\r\nimport api, { Book } from \"../../api\";\r\n\r\n/**\r\n *\r\n * @param {object} Props\r\n * @param {Book} Props.book\r\n * @param {boolean} Props.save\r\n */\r\nconst BookCard = ({ book, saver, refresh }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const openPage = () => window.open(book.link, \"_blank\");\r\n\r\n  const save = () => api.save(book);\r\n  const unsave = () => api.delete(book).then(refresh);\r\n\r\n  let desc = book.description ? book.description.substr(0, 60) : \"\";\r\n  if (desc) {\r\n    desc = desc.length < book.description.length ? desc + \"...\" : desc;\r\n  }\r\n\r\n  return (\r\n    <div className=\"book-card\" onClick={() => setOpen(!open)}>\r\n      <header>\r\n        <h3>{book.title}</h3>\r\n      </header>\r\n      <main>\r\n        <img src={book.image} alt={book.title} />\r\n      </main>\r\n      <footer>\r\n        <div>{desc}</div>\r\n        <div>By {book.authors.reduce((acc, curr) => acc + \", \" + curr, \"\")}</div>\r\n      </footer>\r\n\r\n      <section className={`buttons${open ? \" open\" : \"\"}`}>\r\n        {saver ? (\r\n          <button className=\"save\" onClick={save}>\r\n            Save\r\n          </button>\r\n        ) : (\r\n          <button className=\"delete\" onClick={unsave}>\r\n            Delete\r\n          </button>\r\n        )}\r\n        <button className=\"info\" onClick={openPage}>\r\n          More Info\r\n        </button>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookCard;\r\n","import React from \"react\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <nav>\r\n      <div>\r\n        <h1>Book Search</h1>\r\n      </div>\r\n      <div>{props.children}</div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TextInput, BookCard } from \"../components\";\r\nimport api from \"../api\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst Search = () => {\r\n  const [books, setBooks] = React.useState([]);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    api.search(e.target[0].value).then(sr => {\r\n      setBooks(sr.items);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"page search\">\r\n      <Navbar>\r\n        <Link to=\"/saved\">My Books</Link>\r\n      </Navbar>\r\n      <form onSubmit={handleSubmit}>\r\n        <TextInput name=\"search\" />\r\n        <button type=\"submit\">Go</button>\r\n      </form>\r\n      <section className=\"results\">\r\n        {books.map(b => (\r\n          <BookCard key={b.id} book={b} saver />\r\n        ))}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport api from \"../api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BookCard } from \"../components\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst Saved = () => {\r\n  const [books, setBooks] = React.useState([]);\r\n\r\n  const refresh = () => api.getSaved().then(setBooks);\r\n\r\n  React.useEffect(() => {\r\n    refresh();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page saved\">\r\n      <Navbar>\r\n        <Link to=\"/\">Search</Link>\r\n      </Navbar>\r\n      <div className=\"books\">\r\n        {books.map(b => (\r\n          <BookCard book={b} key={b.id} refresh={refresh} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Saved;\r\n","import React from \"react\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport { Search, Saved } from \"./pages\";\nimport api from \"./api\";\n\nfunction App() {\n  api.search(\"hentai\");\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={Search} />\n        <Route exact path=\"/saved\" component={Saved} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}